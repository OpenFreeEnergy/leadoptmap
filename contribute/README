How to run on Schrodinger's infrastructure
- Example command:
    #step 1 
    $SCHRODINGER/run main.py mol2_file -o filename 
  where $SCHRODINGER is the environment variable whose value should be the path of installed Schrodinger package,
  main.py is the 'main.py' program, and 'mol2_file' is an argument for main.py,
  specifying the path of the input structure files.
- The Schrodinger package should include the Canvas product, which provides the Maximum Substructure search
  algorithm that 'main.py' depends on.
- The input structure files should be in either the mol2 or the mae file formats.
    #step 2 
    $SCHRODINGER/run nx2img.py filename.pkl filename2.svg -s 
    #here filename.pkl file is the pickle file generated by step 1 and the 
filename2.svg is the final svg file to show the graph.

How to run on Openeye's infrastructure

- Example command:
    #step 1. to do the mcs searching and generate dot, pkl graph files which contain graph informations
        python main.py mol2_file -o filename
    #mol2_file is the path to the directory which contains the molecule strutures in mol2 format.
    #software needed for step 1: 
        #outside software: openeye tookit (oechem); networkx and graphviz for using the graph features. pygraphviz for generating the dot file(not crucial)
        #inside script: main.py mcs.py struc.py kbase.py rule.py similarity.py graph.py 

    #step 2. to generate the svg file by using the pkl file generated from step 1.
        python nx2img.py filename.pkl filename2.svg -s 
        # Here filename.pkl file is the pickle file generated by step 1 and the filename2.svg is the final svg file to show the graph.
        #note: for openeye infrastructure, we only support the svg format as theoutput graph format and the final svg depends on intermediate svg files so we need to add save option "-s" at the end.

    #software needed for step 2: 
        #outside software: openeye tookit(oechem oedepict) ; graphviz for graph rending, pydot related codes for graph layout: pyparsing.py, pydot.py, dot_parser.py
        #inside script: nx2img.py imggenerator.py 
    
    
#note :  if we want to use Jonathan's graph planning method, which is used in LOMAP paper, we need to add build option like
        python main.py mol2_file -o filename -b 
            or:
        $SCHRODINGER/run main.py mol2_file -o filename -b 
        
# If the build option is enabled, user could provide their own known compound list if there is any.
#The knowncompound list should be in the same directory as mol2 file and named knownCompounds, knownCompounds contains known molecule names which consist with the mol2 file name and the name should be in a line by line format.)
    
